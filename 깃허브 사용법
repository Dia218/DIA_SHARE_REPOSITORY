by. 경기대 컴공 201912101 이상은
---


#__깃허브 간단 사용법__

방법 1. init
폴더 안에서 우클릭 후 git bash 실행
git init
git remote add origin (깃허브 저장소 주소)
git branch -m main
git pull origin main
git add .
git commit -m “커밋메세지”
git push origin main
-	내 컴퓨터에 이미 생성된 폴더의 내용을 업로드할 때 이용하기 좋음


방법 2. clone (이 방법은 아직 거의 안해봐서 맞는지 모름)
git clone
git add .
git commit -m “커밋메세지”
git push origin main
-	깃허브 저장소의 내용을 가져와서 사용하는 경우에 이용하기 좋음


#__명령어 정리__
__- 개인편 -__
(괄호)는 괄호 안의 내용만 입력하면 된다, 괄호 기호는 적지 않는다

+ 로컬저장소 만들기
내 컴퓨터에 .git 폴더 생성

+ git init
+	새로운 로컬저장소 생성
현재 폴더를 깃허브와 연결시킬 폴더로 지정 -> 작업할 폴더
현재 폴더 안에 있는 파일들만 깃허브에 올릴 수 있음
\+ 현재 폴더 안에 .git 폴더 생성

또는

	git clone (https깃허브 저장소 주소)
	원격저장소를 복사하여 로컬저장소 생성
깃허브에 만든 저장소를 그대로 복사하여 내 컴퓨터에 똑같은 폴더 생성
복제된 폴더는 깃허브와 연결된 폴더 -> 작업할 폴더
깃허브에 올릴 파일들을 복제된 폴더에 넣어주어야 함
+ 복제된 폴더 안에 .git 폴더 생성
ex) 깃허브에 A라는 이름의 저장소를 만들고 그 저장소를 clone 시켰을 경우,
내 컴퓨터에 A라는 이름의 폴더가 생성됨


	저장소 상태 확인하기 status
저장소의 상태를 파악하기

	git status
	저장소의 상태를 띄운다
영어로 나와서 알아듣기는 어렵지만 add나 commit 상태 등을 볼 수 있다
명령어 칠 때 중간중간마다 수시로 입력해서 상태를 확인하는 것을 추천한다


	로컬저장소와 원격저장소의 연결 관리 remote
내 컴퓨터의 폴더와 깃허브 저장소의 연결을 관리해주기

	git remote -v
	로컬저장소에 연결된 원격저장소 확인
내 컴퓨터의 해당 폴더와 깃허브의 저장소가 연결되어 있을 경우,
연결된 깃허브 저장소의 주소를 알려줌
연결된 깃허브 저장소가 없을 경우, 아무것도 출력하지 않음

	git remote add (origin) (https깃허브 저장소 주소)
	로컬저장소에 원격저장소 연결
해당 폴더와 깃허브 저장소를 연결해줌
해당 폴더의 파일들을 연결된 깃허브 저장소에 업로드 가능

#	origin
깃허브 저장소를 가리키는 이름(주소)
해당 폴더와 연결할 기본 깃허브 저장소 주소 = origin
(origin이 가리키는 저장소 외에, origin이 아닌 다른 이름으로 깃허브 저장소 주소 추가 가능?)

	git remote rm (origin)
	= git remote remove (origin)
	로컬저장소에 연결된 원격저장소 연결해제
해당 폴더와 연결되어 있는 깃허브 저장소의 연결 해제


	브랜치 관리 (이름변경만) 1. branch
로컬 저장소와 원격 저장소의 작업공간 branch를 관리하기

#	branch
작업 공간 같은 개념
여러 개의 브랜치를 생성하여, 각각의 브랜치에 작업 내용을 저장
각각의 브랜치의 내용들은 main 브랜치로 모아짐

#	깃허브에 생성한 원격 저장소의 브랜치
main 브랜치가 기본이다

#	내 컴퓨터에 생성한 로컬 저장소의 브랜치
master 브랜치가 기본이다

#	현재 내가 작업중인 브랜치의 이름
명령어 입력 줄 바로 윗줄에는 항상 내 컴퓨터의 이름과 현재 명령어를 실행중인 폴더 위치가 뜨고, 맨 오른쪽에 괄호로 (브랜치이름)이 적힌다
그것이 현재 작업중인 브랜치 이름이다

#	master 브랜치의 이름 변경
깃허브의 main 브랜치에 컴퓨터의 master 브랜치 내용을 올리기 위해
컴퓨터의 master 브랜치 이름을 main으로 바꾸어 주어야 하는 것 같다

	git branch -m (현재 이름) (바꿀 이름)
	= git branch -m (바꿀 이름)
	브랜치의 이름을 바꾸어 준다

나머지 브랜치 내용은 아래에서 계속


	원격저장소의 내용 불러오기 pull
깃허브 저장소에 업로르 된 내용을 내 컴퓨터의 폴더로 가져오기

	git pull (origin) (main)
	git pull (깃허브저장소) (브랜치)
	내 컴퓨터의 폴더 안에 깃허브 저장소의 파일들을 가져온다

origin = remote로 연결해줄 때 지었던 깃허브 저장소의 주소이름
main = 깃허브 저장소의 branch 이름

#	로컬 저장소를 만들 때 git init을 사용했을 경우
init으로 내 컴퓨터에 git 폴더를 만들었을 경우에는 내 컴퓨터의 폴더 내용물과 깃허브의 폴더 내용물이 다른 상태일 수 있다 (readme 파일이나 gitignore 파일을 생성했을 경우)
내 컴퓨터의 폴더 파일들을 업로드하기 전에, 깃허브 저장소 내용물을 pull하여 내 컴퓨터의 폴더로 받아와야 파일이 꼬이지 않는다


	추적할 파일을 스테이징 영역에 등록 add
깃허브 저장소에 업로드할 내용물을 선택하기

	git add .	
/* 점(.) */
	로컬저장소의 모든 파일을 스테이징 영역에 등록
내 컴퓨터의 폴더 안에 있는 모든 내용물(파일이나 폴더 등등)을 업로드 가능 상태로 만듦

	git add (파일이름)
	(파일이름)만 스테이징 영역에 등록
(파일이름)만 업로드 가능 상태로 만듦

파일이름 = 업로드할 내용물 이름
선택하지 않은 다른 내용물들은 업로드가 안됨


	수정 사항 등록 commit
수정한 부분을 반영해주기, 수정 이력 남기기

	git commit -m “(커밋메세지)”
	스테이징 영역에 등록한 파일들의 수정 정보를 등록
업로드하기로 한 내용물들의 수정 상태를 저장함

#	커밋 메세지
큰 따옴표 안에 커밋 메세지를 적어줌
커밋 메세지는 일종의 메모 역할
어떤 부분을 수정했는지 알 수 있도록 적어주는 게 좋다


	원격저장소로 업로드 push
깃허브의 폴더에 수정 사항 반영하기
깃허브에 파일 업로드 하기

	git push (origin) (main)
	git push (깃허브저장소) (브랜치)
	스테이징 영역의 모든 수정 사항(커밋)들을 깃허브의 폴더에 반영하고, 
수정 기록(메모=커밋메세지)들을 업로드 함
내 컴퓨터의 폴더 파일들을 업로드 하고, 마지막 commit 상태로 업로드 함

origin = remote로 연결해줄 때 지었던 깃허브 저장소의 주소이름
main = 깃허브 저장소의 branch 이름


	커밋과 스테이징 취소 reset
git commit과 git add 명령어를 쓰기 전의 시점으로 되돌리기

	git reset HEAD (파일이름)
	(파일이름)에 대해 스테이징 취소
해당 파일 git add 취소, 파일 추적 중지
해당 파일을 업로드 불가 상태로 만듦

	git reset --soft HEAD^
	마지막 커밋 취소, 스테이징 상태
git commit 취소, git add 그대로

	git reset --mixed HEAD^
	= git reset HEAD^
	마지막 커밋 취소, 해당 파일들 스테이징 취소
git commit 취소, 해당 시점의 git add 취소
(마지막에서 두번째 커밋 후의 git add 취소)

	git reset HEAD~2
	마지막 2개의 커밋 취소, 해당 파일들 스테이징 취소
가장 최근의 git commit 2개 취소, 해당 시점의 git add 취소
(마지막에서 세번째 커밋 후의 git add 취소)

	git reset --hard HEAD^ //주의!!!
	마지막 커밋 1개 취소, 취소할 커밋 내용들을 내 컴퓨터에서 삭제
마지막에서 두번째 커밋 후에 추가한 파일이나 수정사항들을 삭제


명령어 정리
- 공용편 -

	브랜치 관리 (전체) 2. branch
브랜치를 나누어서 업로드하고 병합하기

	브랜치 간단 사용법
①	각자 작업 중인 코드 관리
git checkout (내가 맡은 브랜치 이름)
git pull (origin) (내가 맡은 브랜치 이름)
코드 수정 또는 추가
git add (파일이름)
git commit -m “이름 : ㅇㅇㅇ을 수정”
git push (origin) (내가 맡은 브랜치 이름)

②	개인 작업이 끝난 코드를 main에 병합
git checkout main
git merge (작업을 마친 브랜치)
git push origin master


	브랜치 생성 및 수정
	git branch
	브랜치 목록 보기
현재 브랜치에는 *이 붙는다

	git branch (생성할 브랜치 이름)
	(브랜치이름)브랜치 생성하기
	또는 깃허브에서 직접 브랜치 만들기

	git checkout -b (생성과 동시에 이동할 브랜치 이름)
	브랜치 만들기와 동시에 이동
브랜치를 만들고 바로 현재 작업 위치를 생성한 브랜치로 이동한다

	git branch -m (현재 이름) (바꿀 이름)
	= git branch -m (바꿀 이름)
	브랜치의 이름 바꾸기

	git branch -d (브랜치 이름)
	브랜치를 삭제한다

	특정 브랜치에 업로드, 특정 브랜치 다운로드
git add와 git commit 진행 후

	git push (origin) (업로드할 브랜치 이름)
	선택한 브랜치에 업로드한다
내 컴퓨터에서 깃허브로 올린다

	git pull (origin) (브랜치 이름)
	해당 브랜치에 있는 내용을 다운로드한다
깃허브에서 내 컴퓨터로 가져온다

	브랜치를 병합하기
	git checkout (이동할 브랜치 이름)
	브랜치 이동하기
현재 작업 중인 위치(브랜치)를 다른 브랜치로 이동한다

	git checkout main
	현재 작업 중인 브랜치를 main 브랜치로 이동한다
병합을 위해 main 브랜치로 이동한다

#	병합
각 브랜치들의 내용을 main으로 합쳐준다

	git merge (병합해 줄 브랜치 이름)
	해당 브랜치의 내용을 main 브랜치에 합쳐준다
브랜치에는 합쳐주었으나 깃허브에 업로드 된 것은 아니다

	git push origin main
	병합한 내용을 업로드한다
깃허브에 병합한 내용을 업로드한다

